// Test bench generated by generator_vhls.py
#include <algorithm>
#include <iterator>

#include "FileReadUtility.hh"
#include "Constants.hh"
#include "PRMEMCTest.h"

const int nevents = 5;  // number of events to run

using namespace std;

int main() {

// error counts
 int err = 0;

///////////////////////////
// input memories
static VMStubMEMemory<BARRELPS> VMSME_L3PHIC22n1;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC23n1;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC24n1;

static TrackletProjectionMemory<BARRELPS> TPROJ_L1L2F_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L1L2G_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L1L2H_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L1L2I_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L1L2J_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L5L6B_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L5L6C_L3PHIC;

static TrackletProjectionMemory<BARRELPS> TPROJ_L5L6D_L3PHIC;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC17n1;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC18n1;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC19n1;

static AllStubMemory<BARRELPS> AS_L3PHICn4;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC20n1;

static VMStubMEMemory<BARRELPS> VMSME_L3PHIC21n1;


///////////////////////////
// output memories
static FullMatchMemory<BARREL> FM_L5L6_L3PHIC;

static FullMatchMemory<BARREL> FM_L1L2_L3PHIC;


///////////////////////////
// open input files
ifstream finput_VMSME_L3PHIC22n1;
bool valid_VMSME_L3PHIC22n1 = openDataFile(finput_VMSME_L3PHIC22n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC22n1_04.dat");
if (not valid_VMSME_L3PHIC22n1) return -1;

ifstream finput_VMSME_L3PHIC23n1;
bool valid_VMSME_L3PHIC23n1 = openDataFile(finput_VMSME_L3PHIC23n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC23n1_04.dat");
if (not valid_VMSME_L3PHIC23n1) return -1;

ifstream finput_VMSME_L3PHIC24n1;
bool valid_VMSME_L3PHIC24n1 = openDataFile(finput_VMSME_L3PHIC24n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC24n1_04.dat");
if (not valid_VMSME_L3PHIC24n1) return -1;

ifstream finput_TPROJ_L1L2F_L3PHIC;
bool valid_TPROJ_L1L2F_L3PHIC = openDataFile(finput_TPROJ_L1L2F_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L1L2F_L3PHIC_04.dat");
if (not valid_TPROJ_L1L2F_L3PHIC) return -1;

ifstream finput_TPROJ_L1L2G_L3PHIC;
bool valid_TPROJ_L1L2G_L3PHIC = openDataFile(finput_TPROJ_L1L2G_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L1L2G_L3PHIC_04.dat");
if (not valid_TPROJ_L1L2G_L3PHIC) return -1;

ifstream finput_TPROJ_L1L2H_L3PHIC;
bool valid_TPROJ_L1L2H_L3PHIC = openDataFile(finput_TPROJ_L1L2H_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L1L2H_L3PHIC_04.dat");
if (not valid_TPROJ_L1L2H_L3PHIC) return -1;

ifstream finput_TPROJ_L1L2I_L3PHIC;
bool valid_TPROJ_L1L2I_L3PHIC = openDataFile(finput_TPROJ_L1L2I_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L1L2I_L3PHIC_04.dat");
if (not valid_TPROJ_L1L2I_L3PHIC) return -1;

ifstream finput_TPROJ_L1L2J_L3PHIC;
bool valid_TPROJ_L1L2J_L3PHIC = openDataFile(finput_TPROJ_L1L2J_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L1L2J_L3PHIC_04.dat");
if (not valid_TPROJ_L1L2J_L3PHIC) return -1;

ifstream finput_TPROJ_L5L6B_L3PHIC;
bool valid_TPROJ_L5L6B_L3PHIC = openDataFile(finput_TPROJ_L5L6B_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L5L6B_L3PHIC_04.dat");
if (not valid_TPROJ_L5L6B_L3PHIC) return -1;

ifstream finput_TPROJ_L5L6C_L3PHIC;
bool valid_TPROJ_L5L6C_L3PHIC = openDataFile(finput_TPROJ_L5L6C_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L5L6C_L3PHIC_04.dat");
if (not valid_TPROJ_L5L6C_L3PHIC) return -1;

ifstream finput_TPROJ_L5L6D_L3PHIC;
bool valid_TPROJ_L5L6D_L3PHIC = openDataFile(finput_TPROJ_L5L6D_L3PHIC, "PRMEMCTest/TrackletProjections_TPROJ_L5L6D_L3PHIC_04.dat");
if (not valid_TPROJ_L5L6D_L3PHIC) return -1;

ifstream finput_VMSME_L3PHIC17n1;
bool valid_VMSME_L3PHIC17n1 = openDataFile(finput_VMSME_L3PHIC17n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC17n1_04.dat");
if (not valid_VMSME_L3PHIC17n1) return -1;

ifstream finput_VMSME_L3PHIC18n1;
bool valid_VMSME_L3PHIC18n1 = openDataFile(finput_VMSME_L3PHIC18n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC18n1_04.dat");
if (not valid_VMSME_L3PHIC18n1) return -1;

ifstream finput_VMSME_L3PHIC19n1;
bool valid_VMSME_L3PHIC19n1 = openDataFile(finput_VMSME_L3PHIC19n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC19n1_04.dat");
if (not valid_VMSME_L3PHIC19n1) return -1;

ifstream finput_AS_L3PHICn4;
bool valid_AS_L3PHICn4 = openDataFile(finput_AS_L3PHICn4, "PRMEMCTest/AllStubs_AS_L3PHICn4_04.dat");
if (not valid_AS_L3PHICn4) return -1;

ifstream finput_VMSME_L3PHIC20n1;
bool valid_VMSME_L3PHIC20n1 = openDataFile(finput_VMSME_L3PHIC20n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC20n1_04.dat");
if (not valid_VMSME_L3PHIC20n1) return -1;

ifstream finput_VMSME_L3PHIC21n1;
bool valid_VMSME_L3PHIC21n1 = openDataFile(finput_VMSME_L3PHIC21n1, "PRMEMCTest/VMStubs_VMSME_L3PHIC21n1_04.dat");
if (not valid_VMSME_L3PHIC21n1) return -1;

///////////////////////////
// open output files
ifstream foutput_FM_L5L6_L3PHIC;
bool valid_FM_L5L6_L3PHIC = openDataFile(foutput_FM_L5L6_L3PHIC, "PRMEMCTest/FullMatches_FM_L5L6_L3PHIC_04.dat");
if (not valid_FM_L5L6_L3PHIC) return -1;

ifstream foutput_FM_L1L2_L3PHIC;
bool valid_FM_L1L2_L3PHIC = openDataFile(foutput_FM_L1L2_L3PHIC, "PRMEMCTest/FullMatches_FM_L1L2_L3PHIC_04.dat");
if (not valid_FM_L1L2_L3PHIC) return -1;


// loop over events
cout << "Start event loop ..." << endl;

for (unsigned int ievt = 0; ievt < nevents; ++ievt) {
cout << "Event: " << dec << ievt << endl;

// read event and write to memories
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC22n1, finput_VMSME_L3PHIC22n1, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC23n1, finput_VMSME_L3PHIC23n1, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC24n1, finput_VMSME_L3PHIC24n1, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L1L2F_L3PHIC, finput_TPROJ_L1L2F_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L1L2G_L3PHIC, finput_TPROJ_L1L2G_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L1L2H_L3PHIC, finput_TPROJ_L1L2H_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L1L2I_L3PHIC, finput_TPROJ_L1L2I_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L1L2J_L3PHIC, finput_TPROJ_L1L2J_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L5L6B_L3PHIC, finput_TPROJ_L5L6B_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L5L6C_L3PHIC, finput_TPROJ_L5L6C_L3PHIC, ievt);
writeMemFromFile<TrackletProjectionMemory<BARRELPS>>(TPROJ_L5L6D_L3PHIC, finput_TPROJ_L5L6D_L3PHIC, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC17n1, finput_VMSME_L3PHIC17n1, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC18n1, finput_VMSME_L3PHIC18n1, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC19n1, finput_VMSME_L3PHIC19n1, ievt);
writeMemFromFile<AllStubMemory<BARRELPS>>(AS_L3PHICn4, finput_AS_L3PHICn4, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC20n1, finput_VMSME_L3PHIC20n1, ievt);
writeMemFromFile<VMStubMEMemory<BARRELPS>>(VMSME_L3PHIC21n1, finput_VMSME_L3PHIC21n1, ievt);

// bx
BXType bx = ievt;
BXType bx_out;

// Unit Under Test
PRMEMCTest(bx,
VMSME_L3PHIC22n1,
VMSME_L3PHIC23n1,
VMSME_L3PHIC24n1,
TPROJ_L1L2F_L3PHIC,
TPROJ_L1L2G_L3PHIC,
TPROJ_L1L2H_L3PHIC,
TPROJ_L1L2I_L3PHIC,
TPROJ_L1L2J_L3PHIC,
TPROJ_L5L6B_L3PHIC,
TPROJ_L5L6C_L3PHIC,
TPROJ_L5L6D_L3PHIC,
VMSME_L3PHIC17n1,
VMSME_L3PHIC18n1,
VMSME_L3PHIC19n1,
AS_L3PHICn4,
VMSME_L3PHIC20n1,
VMSME_L3PHIC21n1,
bx_out,
FM_L5L6_L3PHIC,
FM_L1L2_L3PHIC);

// compare the computed outputs with the expected ones
bool truncation = false;
err += compareMemWithFile<FullMatchMemory<BARREL>>(FM_L5L6_L3PHIC, foutput_FM_L5L6_L3PHIC, ievt, "FM_L5L6_L3PHIC", truncation);
err += compareMemWithFile<FullMatchMemory<BARREL>>(FM_L1L2_L3PHIC, foutput_FM_L1L2_L3PHIC, ievt, "FM_L1L2_L3PHIC", truncation);

} // end of the event loop

return err;

}